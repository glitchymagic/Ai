// Force test responses by bypassing engagement filters
const ContextualPokemonBot = require('./pokemon-bot-contextual.js');

const bot = new ContextualPokemonBot();

// Override engagement selector to always engage
bot.engagementSelector.shouldEngageWithPost = async () => ({
    action: 'engage',
    type: 'contextual',
    reason: 'forced_test'
});

// Override sentiment filter
bot.sentimentAnalyzer.shouldEngageWithSentiment = () => ({
    engage: true,
    reason: 'forced_test'
});

// Real-world test posts
const realPosts = [
    {
        name: "Real Social Post 1",
        username: "pokecollector",
        text: "Just hit 1000 cards in my collection! Started in January and can't believe how far I've come. My binder is getting heavy 😅 #PokemonTCG",
        hasImages: true,
        visualData: {
            analysis: { contentType: 'showcase' },
            threadContext: { threadLength: 1, mainTopic: 'collection' }
        }
    },
    {
        name: "Real Price Question",
        username: "seller123",
        text: "Anyone know what a PSA 10 Crown Zenith Pikachu VMAX is going for? Got one back from grading",
        hasImages: false
    },
    {
        name: "Real Tournament",
        username: "gamestore",
        text: "🏆 POKEMON TOURNAMENT TONIGHT! 7PM start, Standard format. $15 entry includes promo pack! Prizing for top 4. See you there trainers!",
        hasImages: true,
        visualData: {
            analysis: { contentType: 'event_poster', subtypes: ['tournament_info'] }
        }
    },
    {
        name: "Real Pull Post",
        username: "luckypuller",
        text: "ARE YOU KIDDING ME?! First pack magic! Look at this beauty! My chase card from Paradox Rift! 🔥🔥🔥",
        hasImages: true,
        visualData: {
            analysis: { contentType: 'showcase' },
            threadContext: { threadLength: 1 }
        }
    },
    {
        name: "Real Stream Announcement",
        username: "pokestreamer",
        text: "Stream starting in 10 mins! Opening a whole Surging Sparks booster box. Who's ready for some pulls? Link in bio! #PokemonTCG",
        hasImages: false
    }
];

async function forceResponses() {
    console.log("🔧 Testing Forced Responses (Bypassing Filters)\n");
    console.log("=".repeat(70));
    
    await bot.priceResponses.initialize().catch(() => {});
    
    for (const post of realPosts) {
        console.log(`\n📝 ${post.name}`);
        console.log(`👤 @${post.username}: "${post.text}"`);
        
        const isSocial = bot.isSocialCommunityPost(
            post.text,
            post.visualData,
            { sentiment: 'positive', confidence: 'high' }
        );
        
        console.log(`📊 Social Detection: ${isSocial ? 'YES' : 'NO'}`);
        
        try {
            const response = await bot.generateContextualResponse(
                post.username,
                post.text,
                post.hasImages,
                post.visualData
            );
            
            if (response) {
                console.log(`💬 Bot says: "${response}"`);
                console.log(`📏 Length: ${response.length} chars`);
                
                // Detect which system generated it
                if (response.includes('@' + post.username) && 
                    (response.includes('🔥') || response.includes('!') || 
                     response.toLowerCase().includes('congrats'))) {
                    console.log(`🎯 Generated by: Thread-Aware (Personality)`);
                } else if (response.includes('$') || response.includes('PSA')) {
                    console.log(`🎯 Generated by: Price Engine`);
                } else if (response.includes('fun —') || response.includes('turnout')) {
                    console.log(`🎯 Generated by: Event Composer`);
                } else {
                    console.log(`🎯 Generated by: Authority Composer`);
                }
            } else {
                console.log(`❌ No response generated`);
            }
        } catch (error) {
            console.log(`❌ Error: ${error.message}`);
        }
        
        console.log("-".repeat(70));
    }
    
    console.log("\n✅ Test complete!");
}

forceResponses().catch(console.error);